---

# Gathering generic facts in order to get info about interfaces and VLAN list
- name: Gathering spine info
  nxos_facts:
    gather_subset: all
  register: nxos_facts_spine_out
  tags:
  - validate
  - underlay
  
# The task tries to check if leaf device point-to-point interfaces are "pingable"
- name: trying to ping leaf devices
  nxos_command:
    commands: 
      - command: ping {{ item | ipmath(offset) }} timeout 1 count 3
  register: nxos_ping_spine_out
  with_items: "{{ nxos_facts_spine_out.ansible_facts.ansible_net_all_ipv4_addresses }}"
  when: item | ipaddr(generic_global_params.uplink[0].net) == item or item | ipaddr(generic_global_params.uplink[1].net) == item
  tags:
  - validate
  - underlay
  
# The task fails if one or more P2P interfaces are unreachable
- name: displaying ping results
  ignore_errors: True
  vars:
  -  regex_pattern: 100.00% packet loss
  fail:
    msg: "WARNING: Cannot ping {{ item['item'] | ipmath(offset) }} from device {{ inventory_hostname }}"
  with_items: "{{ nxos_ping_spine_out.results }}"
  when: 
    # Skipping check related to not point-to-point interfaces
    - item['skipped'] is not defined
    # Errors triggered if 'regex_pattern' is found within the results
    - item['stdout'][0] is regex(regex_pattern)
  tags:
  - validate
  - underlay
  
# Checking for OSPF neighborship on spine devices
- name: gathering info about OSPF Underlay neighborship
  nxos_command:
    commands: 
      - command: show ip ospf underlay neighbors
        output: json
  register: nxos_ospf_spine_out
  tags:
  - validate
  - underlay
  
# The task fails if the amount of OSPF neighboship doesn't match the amount of leaf devices
- name: verifying OSPF Underlay neighborship amount
  ignore_errors: True
  vars:
  -  neighborship: "{{ nxos_ospf_spine_out.stdout_lines.0.TABLE_ctx.ROW_ctx.TABLE_nbr.ROW_nbr | map(attribute='rid') | list | length }}"
  fail:
    msg: "WARNING: OSPF neighborship missing on {{ inventory_hostname }}"
  when: neighborship != leaf_count
  tags:
  - validate
  - underlay
  
# The task fails if one or more OSPF neighboships are not in 'FULL' state
- name: verifying OSPF Underlay neighborship status
  ignore_errors: True
  fail:
    msg: "WARNING: Cannot establish OSPF neighborship on interface '{{ nxos_ospf_spine_out.stdout_lines.0.TABLE_ctx.ROW_ctx.TABLE_nbr.ROW_nbr[item.0].intf}}' related to device '{{ inventory_hostname }}'"
  with_indexed_items: "{{ nxos_ospf_spine_out.stdout_lines.0.TABLE_ctx.ROW_ctx.TABLE_nbr.ROW_nbr | map(attribute='state') | list }}"
  # Errors triggered if any not full neighborship is found 
  when: item.1 != 'FULL'
  tags:
  - validate
  - underlay
  
# Checking for BGP neighborship on spine devices
- name: gathering info about BGP neighborship
  nxos_command:
    commands: 
      - command: show bgp l2vpn evpn summary
        output: json
  register: nxos_bgp_spine_out
  tags:
  - validate
  - overlay
  
# The task fails if the amount of BGP neighboship doesn't match the amount of leaf devices
- name: verifying BGP neighborship amount
  ignore_errors: True
  vars:
  - neighborship: "{{ nxos_bgp_spine_out.stdout_lines.0.TABLE_vrf.ROW_vrf.TABLE_af.ROW_af.TABLE_saf.ROW_saf.TABLE_neighbor.ROW_neighbor | map(attribute='neighborid') | list | length }}"
  - condition: "{{ (switch_count | int) - 1 }}"
  fail:
    msg: "WARNING: BGP neighborship missing on {{ inventory_hostname }}"
  when: neighborship != condition
  tags:
  - validate
  - overlay
  
# The task fails if one or more BGP neighboships are not in 'ESTABLISHED' state
- name: verifying BGP neighborship status
  ignore_errors: True
  fail:
    msg: "WARNING: Cannot establish BGP neighborship with {{ nxos_bgp_spine_out.stdout_lines.0.TABLE_vrf.ROW_vrf.TABLE_af.ROW_af.TABLE_saf.ROW_saf.TABLE_neighbor.ROW_neighbor[item.0].neighborid }} on {{ inventory_hostname }}"
  with_indexed_items: "{{ nxos_bgp_spine_out.stdout_lines.0.TABLE_vrf.ROW_vrf.TABLE_af.ROW_af.TABLE_saf.ROW_saf.TABLE_neighbor.ROW_neighbor | map(attribute='state') | list }}"
  when: item.1 != "Established"
  tags:
  - validate
  - overlay